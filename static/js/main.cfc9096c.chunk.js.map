{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","React","Component","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","this","city","country","temperature","humidity","description","error","suggestion","API_KEY","process","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfc9096c.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Titles extends React.Component{\n    render(){\n        return(\n            <div>\n                <h1 className=\"title-container__title\">How's the weather today？</h1>\n                <h1 className=\"titl-container__subtitle\">Wish you have a nice day!</h1>\n            </div>\n        )\n    }\n}\n\nexport default Titles;","import React from \"react\";\n\nconst Form = (props) =>(\n    <form onSubmit={props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"City\"></input>\n        <input type=\"text\" name=\"country\" placeholder=\"Country\"></input>\n        <button>Go!</button>\n    </form>\n)\n\nexport default Form;","import React from \"react\";\n\nclass Weather extends React.Component{\n    render(){\n        return(\n            <div className=\"weather\">\n                {this.props.city && this.props.country && \n                <h1 className=\"weather-value\">Location : \n                    <span className=\"weather-info\">{this.props.city}, {this.props.country}</span>\n                </h1>}\n                {this.props.temperature && \n                <h1 className=\"weather-value\">Temperature : \n                    <span className=\"weather-info\">{this.props.temperature} ℃</span>\n                </h1>}\n                {this.props.humidity && \n                <h1 className=\"weather-value\"> Humidity : \n                    <span className=\"weather-info\">{this.props.humidity}</span>\n                </h1>}\n                {this.props.description && \n                <h1 className=\"weather-value\">Condition  : \n                    <span className=\"weather-info\">{this.props.description}</span>\n                </h1>}\n                {this.props.error && \n                <h1><span className=\"weather-error\">{this.props.error}</span></h1>}\n                <h1><span>{this.props.suggestion}</span></h1>\n            </div>\n        )\n    }\n}\n\nexport default Weather;","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n// import bgImage from './bgp.jpg';\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API;\n//always remember to hide api keys\n\nclass App extends React.Component{\n  state = {\n    temperature : undefined,\n    city : undefined,\n    country : undefined,\n    humidity : undefined,\n    description : undefined,\n    error : undefined,\n    suggestion:undefined\n  }\n\n  getWeather  = async(e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    //const api_call = await fetch(\"http://api.openweathermap.org/data/2.5/weather?q=Vancouver,ca&appid=16fd8620e42a29cdbc4b6968556319fc&units=metric\");\n    const data = await api_call.json();\n    if(city&&country){\n      console.log(data);\n      this.setState({\n      temperature : data.main.temp,\n      city : data.name,\n      country : data.sys.country,\n      humidity : data.main.humidity,\n      description : data.weather[0].description,\n      error : \"\"\n      })\n    } else{\n      this.setState({\n        temperature : undefined,\n        city : undefined,\n        country : undefined,\n        humidity : undefined,\n        description : undefined,\n        error : \"Please enter a valid city or country!\"\n      })\n    };\n    if (this.state.temperature > 25) {\n      this.setState({\n      suggestion:\"You are not gonna want to wear a jacket!\"\n      })}\n    else if(this.state.temperature > 10 && this.state.temperature <= 25){\n      this.setState({\n      suggestion:\"A light jacket would be perfect!\"\n      })}\n    else if(this.state.temperature === undefined){\n      this.setState({\n      suggestion:\"No can do!\"\n      })}\n    else{\n      this.setState({\n      suggestion:\"You need some thing heavy to prevent being frozen!\"\n      })}\n  }\n\n  render(){\n    return(\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            {/* <img src={bgImage} className=\"bgp\" alt=\"weather\" center center no-repeat/> */}\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-5 title-container\">\n                  <Titles/>\n                </div>\n                <div className=\"col-7 title-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <Weather \n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                    suggestion={this.state.suggestion}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}